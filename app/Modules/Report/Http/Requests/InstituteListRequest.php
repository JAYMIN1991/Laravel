<?php

namespace App\Modules\Report\Http\Requests;

use App\Common\GeneralHelpers;
use App\Modules\Shared\Misc\InstituteListViewHelper;
use Illuminate\Foundation\Http\FormRequest;

/**
 * Class InstituteListRequest
 * @package App\Modules\Report\Http\Requests
 */
class InstituteListRequest extends FormRequest {

	protected $planStatus = [
		InstituteListViewHelper::PLAN_STATUS_VERIFICATION_PENDING,
		InstituteListViewHelper::PLAN_STATUS_VERIFIED,
		InstituteListViewHelper::PLAN_STATUS_CANCELLED,
		InstituteListViewHelper::PLAN_STATUS_DEACTIVATED
	];

	/**
	 * Determine if the user is authorized to make this request.
	 *
	 * @return bool
	 */
	public function authorize() {
		return true;
	}

	/**
	 * Get the validation rules that apply to the request.
	 *
	 * @return array
	 */
	public function rules() {
		return [
			'institute_id' => 'sometimes|institute',
			'plan_status'  => 'sometimes|in:' . implode(',', $this->planStatus),
		];
	}

	/**
	 * Get custom attributes for validator errors.
	 *
	 * @return array
	 */
	public function attributes() {
		return [
			'institute_id' => trans('report::institute-list.index.institute'),
			'user_login'   => trans('report::institute-list.index.user_id'),
			'plan_status'  => trans('report::institute-list.index.plan_status'),
			'ref_by'       => trans('report::institute-list.index.ref_by'),
			'date_from'    => trans('report::institute-list.index.date_from'),
			'date_to'      => trans('report::institute-list.index.date_to'),
		];
	}

	/**
	 * Get data to be validated from the request.
	 *
	 * @return array
	 */
	protected function validationData() {
		$input = [];

		/**
		 * Decode institute and ref_by id and merge to request input
		 */
		if ( $this->has('institute_id') ) {
			$input['institute_id'] = GeneralHelpers::decode($this->input('institute_id'));
		}

		if ( $this->has('ref_by') ) {
			$input['ref_by'] = GeneralHelpers::decode($this->get('ref_by'));
		}

		$this->merge($input);

		return parent::validationData(); // TODO: Change the autogenerated stub
	}
}
